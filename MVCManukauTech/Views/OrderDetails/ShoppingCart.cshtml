@model IEnumerable<MVCManukauTech.ViewModels.OrderDetailsQueryForCartViewModel>

@{
    ViewData["Title"] = "ShoppingCart";
    //count lines as cart is built on server, then pass on to jscript
    int initialLineCount = 0;
}

<h1>Order Number @ViewBag.OrderId</h1>

<p>

</p>
<table class="table">
    <thead>
        <tr>
            <th>
                Line #
            </th>
            <th>
                ProductId
            </th>
            <th>
                Image
            </th>
            <th>
                Name
            </th>
            <th>
                Quantity
            </th>
            <th>
                Unit Price
            </th>
            <th>
                Subtotal
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            string subTotal = Convert.ToDouble(Convert.ToDouble(item.Quantity) * Convert.ToDouble(item.UnitCost)).ToString("#0.00");
            //assuming here that quantities are always integers.  Needs change for products like tonnes of beer.  Half a tonne can be enough.
            string quantity = Convert.ToInt32(item.Quantity).ToString();
            //Note that for some industries you would have more than 2 decimal places - 4 is common - unitcost can be fractional
            string unitCost = Convert.ToDouble(item.UnitCost).ToString("#0.00");
            initialLineCount = item.LineNumber;
            <tr>
                <td>
                    @item.LineNumber
                </td>
                <td>
                    @item.ProductId
                </td>
                <td>
                    <img src="~/images/products/@item.ImageFileName" style="height:10em" />
                </td>
                <td>
                    @item.ProductName
                </td>
                <td>
                    @*140903 JPC adding width:5em width:7em to control display input field sizes.
                        That style tag is getting long - TODO move it into css and/or find similar existing bootstrap style*@
                    <input type="number" min="1" step="1" id="quantity_@item.LineNumber" style="text-align:right; width:5em"
                           value="@quantity" maxlength="2" required  onchange="xAjaxChangeQuantity(this.value, @item.LineNumber);" />
                </td>
                <td>
                    @*TODO - make use of data-unitcost custom attribute to store more precise unitcost
                        when it goes beyond 2 decimal places
                        ref: http://html5doctor.com/html5-custom-data-attributes/*@
                    <input type="text" id="unitcost_@item.LineNumber" style="text-align:right; width:7em"
                           value="@unitCost" data-unitcost="@item.UnitCost" maxlength="10" readonly />
                </td>
                <td>
                    <input type="text" id="subTotal_@item.LineNumber" style="text-align:right; width:7em"
                           value="@subTotal" maxlength="10" readonly />
                </td>
                <td>
                    <input type="button" class="btn-outline-danger" onclick="xAjaxDeleteItem(@item.LineNumber, @item.OrderId)" value="Remove"/>
                    @*<a asp-controller="OrderDetails" asp-action="DeleteFromCart" asp-route-id="@item.ProductId, @item.LineNumber">Remove</a>*@
                </td>
            </tr>
        }

        @*Display Grand Total in the same table*@
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td style="font-weight:bold; text-align:right">
                Grand Total:
            </td>
            <td>
                <input type="text" id="grandTotal" style="text-align:right; width:7em" readonly />
            </td>
        </tr>

        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td>
                <a href="~/Catalog"><button>Continue Shopping</button></a>
            </td>
            <td>
                <a href="~/Checkout"><button>Go to Checkout</button></a>
            </td>
        </tr>

    </tbody>
</table>


@*140901 JPC hidden fields as handy drop-boxes
    where C# code can drop values for Javascript to pick up and run with*@
<input id="hidLineCount" type="hidden" value="@initialLineCount" />

@*20170319 JPC get more flexible about deployment in website sub-folders defined as apps
    by "dropping" the ~ operator into HTML in a way that JavaScript can get to it
       20180312 JPC ~ is not working here in ASP.NET Core 2.0 TODO investigate*@
<input id="rootDirectory" type="hidden" value="/" />

<script type="text/javascript">
    var lineCount = document.getElementById("hidLineCount").value;
    document.onload = DisplayGrandTotal();

    function DisplayGrandTotal() {
        //add up the subtotals to get a grand total
        var grandTotal = 0;
        for (i = 1; i <= lineCount; i++) {
            var oeSubTotal = document.getElementById("subTotal_" + i.toString());
            grandTotal += oeSubTotal.value * 1;
        }
        oeGrandTotal = document.getElementById("grandTotal");
        oeGrandTotal.value = grandTotal;
    }

    function xAjaxDeleteItem(lineNumber,orderid) {        
        
        var xmlhttp;
        xmlhttp = new XMLHttpRequest();
        var url = "/OrderDetails/DeleteFromCart?LineNumber="+lineNumber;
        xmlhttp.open("GET", url, false);
        xmlhttp.send();
        document.location.reload();
        

    }

    function xAjaxChangeQuantity(qty, lineNumber) {
        //update the server to keep in sync with change here
        //code source for this is w3schools

        // use parseFloat rather than the more obvious parseInt because of possible future options
        var quantity = parseFloat(qty);
        if (isNaN(quantity)) quantity = 0;

        var oeUnitCost = document.getElementById("unitcost_" + lineNumber.toString());
        var unitCost = parseFloat(oeUnitCost.value);
        var oeSubTotal = document.getElementById("subTotal_" + lineNumber.toString());
        oeSubTotal.value = (quantity * unitCost).toString();
        DisplayGrandTotal();

        var xmlhttp = new XMLHttpRequest();
        
        var requestString = document.getElementById("rootDirectory").value + "OrderDetails/ShoppingCartUpdate";

        var postString = "Quantity={0}&LineNumber={1}";
        postString = postString.replace("{0}", quantity);
        postString = postString.replace("{1}", lineNumber);

        xmlhttp.open("POST", requestString, false);
        xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xmlhttp.send(postString);

        var response = xmlhttp.responseText;
        if (response == "ERROR") {
            alert("ERROR - please redo the previous data entry");
        } else {
            
        }

    }

</script>